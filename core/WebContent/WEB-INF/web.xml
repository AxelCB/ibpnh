<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>ibpnh-core</display-name>
  <description>ibpnh - Backend</description>

	<!-- Java Melody, MUST be setted up first -->
	<!--<filter>-->
		<!--<filter-name>monitoring</filter-name>-->
		<!--<filter-class>net.bull.javamelody.MonitoringFilter</filter-class>-->
		<!--<init-param>-->
			<!--<param-name>no-database</param-name>-->
			<!--<param-value>false</param-value>-->
		<!--</init-param>-->
		<!--<init-param>-->
			<!--<param-name>system-actions-enabled</param-name>-->
			<!--<param-value>false</param-value>-->
		<!--</init-param>-->
		<!--<async-supported>true</async-supported>-->
	<!--</filter>-->
	<!--<filter-mapping>-->
		<!--<filter-name>monitoring</filter-name>-->
		<!--<url-pattern>/*</url-pattern>-->
	<!--</filter-mapping>-->
	<!--<listener>-->
		<!--<listener-class>net.bull.javamelody.SessionListener</listener-class>-->
	<!--</listener>-->

	<!-- Monitoring Security for Java Melody -->
	<!-- Remember to enable a user in the tomcat-users.xml file! -->
	<login-config>
		<auth-method>BASIC</auth-method>
		<realm-name>Monitoring</realm-name>
	</login-config>
	<security-role>
		<role-name>monitoring</role-name>
	</security-role>
	<security-constraint>
		<web-resource-collection>
			<web-resource-name>Monitoring</web-resource-name>
			<url-pattern>/monitoring</url-pattern>
		</web-resource-collection>
		<auth-constraint>
			<role-name>monitoring</role-name>
		</auth-constraint>
		<!-- if SSL enabled (SSL and certificate must then be configured in the server)
		<user-data-constraint>
			<transport-guarantee>CONFIDENTIAL</transport-guarantee>
		</user-data-constraint> -->
	</security-constraint>
	
	<!-- Main Spring Context Loading -->
	<context-param>
  		<param-name>spring.profiles.active</param-name>
  		<param-value>development</param-value>
  	</context-param>
  	<context-param>
	    <param-name>contextConfigLocation</param-name>
	    <param-value>
	    	classpath:spring/mainContext.xml
	    	classpath:spring/servletContext.xml
	    </param-value>
	</context-param>
	<listener>
	    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<listener>
	    <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	
	<!-- Spring Dispatcher Servlet Definition -->
	<servlet>
		<servlet-name>ibpnhMain</servlet-name>
		<servlet-class>
			org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
		<load-on-startup>1</load-on-startup>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/servletContextDummy.xml</param-value>
		</init-param>
		<async-supported>true</async-supported>
	</servlet>	
	<servlet-mapping>
		<servlet-name>ibpnhMain</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- Spring's WS Servlet - SMSs -->
    <!--<servlet-mapping>-->
        <!--<servlet-name>ibpnhWs</servlet-name>-->
        <!--<url-pattern>/ws/*</url-pattern>-->
    <!--</servlet-mapping>-->
    <!-- -->
    <!--<servlet>-->
        <!--<servlet-name>cometd</servlet-name>-->
        <!--<servlet-class>org.cometd.server.CometDServlet</servlet-class>-->
        <!--<async-supported>true</async-supported>-->
    <!--</servlet>-->
    <!-- -->
    <!--<servlet-mapping>-->
        <!--<servlet-name>cometd</servlet-name>-->
        <!--<url-pattern>/cometd/*</url-pattern>-->
    <!--</servlet-mapping>-->
	
	<filter>
		<filter-name>corsFilter</filter-name>
    	<filter-class>org.kairos.ibpnh.core.web.filter.CorsRequestFilter</filter-class>
    	<async-supported>true</async-supported>
	</filter>
	<filter-mapping>
		<filter-name>corsFilter</filter-name>
		<url-pattern>*</url-pattern>
	</filter-mapping>
	
	<filter>
        <filter-name>cross-origin</filter-name>
        <filter-class>org.eclipse.jetty.servlets.CrossOriginFilter</filter-class>
        <async-supported>true</async-supported>
    </filter>
    <filter-mapping>
        <filter-name>cross-origin</filter-name>
        <url-pattern>/cometd/*</url-pattern>
    </filter-mapping>
	
	<filter>
    	<filter-name>setCharacterFilter</filter-name>
    	<filter-class>org.apache.catalina.filters.SetCharacterEncodingFilter</filter-class>
    	<init-param>
        	<param-name>encoding</param-name>
        	<param-value>UTF-8</param-value>
        </init-param>
        <async-supported>true</async-supported>
	</filter>
	<filter-mapping>
		<filter-name>setCharacterFilter</filter-name>
		<url-pattern>*</url-pattern>
	</filter-mapping>
	
	<!-- Require HTTPS only -->
	<!-- gradleWithRemoveThis
	<security-constraint>
		<web-resource-collection>
			<web-resource-name>HTTPSOnly</web-resource-name>
			<url-pattern>/*</url-pattern>
		</web-resource-collection>
		<user-data-constraint>
			<transport-guarantee>CONFIDENTIAL</transport-guarantee>
		</user-data-constraint>
	</security-constraint>
	gradleWithRemoveThis -->
	
	<!-- DataSource loading -->
	<resource-ref>
		<description>postgreSQL Ibpnh DataSource</description>
		<res-ref-name>jdbc/ibpnhDS</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>
</web-app>